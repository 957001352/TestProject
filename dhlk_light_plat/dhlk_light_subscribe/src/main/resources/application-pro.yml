debug: false
server:
  port: 10053
  tomcat:
    max-threads: 500
spring:
  application:
    name: light-subscribe
  cloud:
    consul:
      host: 127.0.0.1
      port: 8500
      discovery:
        register: true
        hostname: 127.0.0.1
        service-name: ${spring.application.name}
        health-check-path: /actuator/health
        health-check-interval: 15s
        tags: urlprefix-/${spring.application.name}
        instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
  #redis配置
  redis:
    database: 0 # Redis数据库索引（默认为0）
    host: 127.0.0.1 # Redis服务器地址
    port: 6379 # Redis服务器连接端口
    password: # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms  # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8   # 连接池中的最大空闲连接
        min-idle: 0   # 连接池中的最小空闲连接
      timeout: 5000 # 连接超时时间（毫秒）
  cache: # Cache部分
    cache-names:  #缓存的名称集合，多个采用逗号分割
    type: redis #缓存的类型，官方提供了很多，这里我们填写redis
    redis:
      cache-null-values: false #是否缓存null数据，默认是false
      time-to-live: 3600000 #redis中缓存超时的时间，默认60000ms
      use-key-prefix: true #缓存数据key是否使用前缀，默认是true
      key-prefix: dhlk #缓存数据key的前缀，在上面的配置为true时有效，
feign:
  hystrix:
    enabled: true
  httpclient:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 10000 #10s就超时
        readTimeout: 10000
#高版本的时间控制有两个地方ribbon，hystrix 先ribbon 后hystrix
#请求处理的超时时间,超时则进行熔断降级处理
ribbon:
  ReadTimeout: 30000
  #请求连接的超时时间
  ConnectTimeout: 30000
#hystrix 配置
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 40000
#MQTT配置信息
mqtt:
  username: dhlk #MQTT-用户名
  password: dhlktech #MQTT-密码
  host: tcp://127.0.0.1:1883 #MQTT-服务器连接地址，如果有多个，用逗号隔开，如：tcp://127.0.0.1:61613，tcp://192.168.2.133:61613
#灯参数设置
lighting:
  lineTime: 180 #灯在线时长 单位秒